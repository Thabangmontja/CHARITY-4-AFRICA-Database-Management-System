  SET SERVEROUTPUT ON;  
  /*Question 2*/
  /*CREATING TABLES*/
  CREATE TABLE CUSTOMER
(
CUSTOMER_ID NUMBER(5) NOT NULL PRIMARY KEY,
FIRST_NAME VARCHAR(50) NOT NULL,
SURNAME VARCHAR(50) NOT NULL,
ADDRESS VARCHAR(50) NOT NULL,
CONTACT_NUMBER NUMBER(10) NOT NULL,
EMAIL  VARCHAR(50) NOT NULL
);

CREATE TABLE EMPLOYEE
(
EMPLOYEE_ID VARCHAR(6) NOT NULL PRIMARY KEY,
FIRST_NAME VARCHAR(50) NOT NULL,
SURNAME VARCHAR(50) NOT NULL,
CONTACT_NUMBER NUMBER(10) NOT NULL,
ADDRESS VARCHAR(50) NOT NULL,
EMAIL  VARCHAR(50) NOT NULL
);

CREATE TABLE DONATOR
(
DONATOR_ID NUMBER(5) NOT NULL PRIMARY KEY,
FIRST_NAME VARCHAR(50) NOT NULL,
SURNAME VARCHAR(50) NOT NULL,
CONTACT_NUMBER NUMBER(10) NOT NULL,
EMAIL  VARCHAR(50) NOT NULL
);

CREATE TABLE DONATION
(
DONATION_ID NUMBER(5) NOT NULL PRIMARY KEY,
DONATOR_ID NUMBER(5) NOT NULL,
DONATION VARCHAR(50) NOT NULL,
PRICE NUMBER(8,2) NOT NULL,
DONATION_DATE DATE NOT NULL,
CONSTRAINT FK_DONATOR_ID FOREIGN KEY(DONATOR_ID) REFERENCES DONATOR(DONATOR_ID)
);

CREATE TABLE DELIVERY
(
DELIVERY_ID NUMBER(3) NOT NULL PRIMARY KEY,
DELIVERY_NOTES VARCHAR(50) NOT NULL,
DISPATCH_DATE  DATE NOT NULL,
DELIVERY_DATE DATE NOT NULL
);

CREATE TABLE RETURNS
(
RETURN_ID VARCHAR(50) NOT NULL PRIMARY KEY,
RETURN_DATE VARCHAR(50) NOT NULL,
REASON VARCHAR(50) NOT NULL,
CUSTOMER_ID NUMBER(5) NOT NULL,
DONATION_ID NUMBER(5) NOT NULL,
EMPLOYEE_ID VARCHAR(6) NOT NULL,
CONSTRAINT FK_CUSTOMER_ID FOREIGN KEY(CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID),
CONSTRAINT FK_DONATION_ID FOREIGN KEY(DONATION_ID) REFERENCES DONATION(DONATION_ID),
CONSTRAINT FK_EMPLOYEE_ID FOREIGN KEY(EMPLOYEE_ID) REFERENCES EMPLOYEE(EMPLOYEE_ID)
);

 

  /*INSERTING VALUES INTO TABLES*/
INSERT INTO CUSTOMER(CUSTOMER_ID, FIRST_NAME, SURNAME, ADDRESS, CONTACT_NUMBER, EMAIL)
VALUES( 11011, 'Jack', 'Smith', '18 Water Rd',0877277521 , 'jsmith@isat.com');
INSERT INTO CUSTOMER(CUSTOMER_ID, FIRST_NAME, SURNAME, ADDRESS, CONTACT_NUMBER, EMAIL)
VALUES( 11012, 'Pat', 'Hedricks', '22 Water Rd',0863257857 , 'ph@mcom.co.za');
INSERT INTO CUSTOMER(CUSTOMER_ID, FIRST_NAME, SURNAME, ADDRESS, CONTACT_NUMBER, EMAIL)
VALUES( 11013, 'Andre', 'Clark', '101 Summer lane',0834567891 , 'aclark@mcom.co.za');
INSERT INTO CUSTOMER(CUSTOMER_ID, FIRST_NAME, SURNAME, ADDRESS, CONTACT_NUMBER, EMAIL)
VALUES( 11014, 'Kevin', 'Jones', '55 Mountain Way',0612547895 , 'kj@isat.co.za');
INSERT INTO CUSTOMER(CUSTOMER_ID, FIRST_NAME, SURNAME, ADDRESS, CONTACT_NUMBER, EMAIL)
VALUES( 11015, 'Lucy', 'Williams', '5 Main Rd',0827238521 , 'lw@mcal.co.za');
SELECT*FROM CUSTOMER;

INSERT INTO EMPLOYEE( EMPLOYEE_ID ,FIRST_NAME ,SURNAME ,CONTACT_NUMBER ,ADDRESS ,EMAIL)
VALUES('emp101', 'Jeff', 'Davis', '0877277521', '10 main road', 'jand@isat.com');
INSERT INTO EMPLOYEE( EMPLOYEE_ID ,FIRST_NAME ,SURNAME ,CONTACT_NUMBER ,ADDRESS ,EMAIL)
VALUES ('emp102', 'Kevin','Marks', '0837377522', '18 water road','km@isat.com');
INSERT INTO EMPLOYEE( EMPLOYEE_ID ,FIRST_NAME ,SURNAME ,CONTACT_NUMBER ,ADDRESS ,EMAIL)
VALUES ('emp103', 'Adanya','Andrews','0817117523', '21 circle lane ','aa@isat.com');
INSERT INTO EMPLOYEE( EMPLOYEE_ID ,FIRST_NAME ,SURNAME ,CONTACT_NUMBER ,ADDRESS ,EMAIL)
VALUES ('emp104','Adebayo','Dryer', '0797215244', '1 sea road', 'aryer@isat.com');
INSERT INTO EMPLOYEE( EMPLOYEE_ID ,FIRST_NAME ,SURNAME ,CONTACT_NUMBER ,ADDRESS ,EMAIL)
VALUES ('emp105', 'Xolani','Samson','0827122255', '12 main road','xosam@isat.com');
SELECT*FROM EMPLOYEE;
    
INSERT INTO DONATOR ( DONATOR_ID ,FIRST_NAME ,SURNAME ,CONTACT_NUMBER ,EMAIL)
VALUES	(20111,'Jeff', 'Watson','0827172250','jwatson@ymail.com',
	20112, 'Stephen','Jones','0837865670','joness@ymail.com',
	20113, 'James', 'Joe', '0878978650', 'jj@isat.com',
	20114, 'Kelly', 'Ross', '0826575650','kross@gsat.com',
	20115, 'Abraham','Clark','0797656430','aclark@ymail.com');
SELECT*FROM  DONATOR;    
    
INSERT INTO DONATION(DONATION_ID ,DONATOR_ID ,DONATION,PRICE ,DONATION_DATE)
VALUES  (7111, 20111, 'KIC Fridge' ,'R 599', '1 May 2022',
	7112, 20112, 'Samsung 42inch LCD', 'R 1 299' ,'3 May 2022',
	7113, 20113, 'Sharp Microwave' ,'R 1 599', '3 May 2022',
	7114, 20115, '6 Seat Dining room table', 'R 799 ','5 May 2022',
	7115, 20114, 'Lazyboy Sofa', 'R 1 199' ,'7 May 2022',
	7116, 20113, 'JVC Surround Sound System ',' R179','9 May 2022');
SELECT*FROM DONATION;
 
INSERT INTO DELIVERY (DEDELIVERY_ID,DELIVERY_NOTES,DISPATCH_DATE,DELIVERY_DATE)
VALUES 	(511,'Double packaging requested', '10 May 2022','15 May 2022',
	512,'Delivery to work address' ,'12 May 2022','15 May 2022',
	513,'Signature required', '12 May 2022','17 May 2022',
	514, 'No notes ','12 May 2022','15 May 2022',
	515, 'Birthday present wrapping required ','18 May 2022','19 May 2022',
	516,'Delivery to work address','20 May 2022','25 May 2022');
SELECT*FROM DELIVERY;
    

INSERT INTO RETURNS (RETURN_ID, RETURN_DATE, REASON, CUSTOMER_ID, DONATION_ID, EMPLOYEE_ID)
VALUES ('ret001', '25 May 2022', 'Customer not satisfied with product', 11011, 7116, 'emp101',
	    'ret002', '25 May 2022', 'Product had broken section', 11013, 7114, 'emp103');
SELECT*FROM RETURNS;    
    
INSERT INTO INVOICE (INVOICE_NUM, CUSTOMER_ID, INVOICE_DATE, EMPLOYEE_ID, DONATION_ID, DELIVERY_ID)
VALUES (8111, 11011, '15 May 2022', 'emp103', 7111, 511,
       8112, 11013, '15 May 2022', 'emp101', 7114, 512,
       8113, 11012, '17 May 2022', 'emp101', 7112, 513,
       8114, 11015, '17 May 2022', 'emp102', 7113, 514,
       8115, 11011, '17 May 2022', 'emp102', 7115, 515,
       8116, 11015, '18 May 2022', 'emp103', 7116, 516);
 SELECT*FROM INVOICE;       
     
     
/*Question 3*/  
 SELECT CUSTOMER.FIRST_NAME || ', '|| CUSTOMER.SURNAME AS CUSTOMER, EMPLOYEE.EMPLOYEE_ID, DELIVERY.DELIVERY_NOTES,
 DONATION.DONATION, INVOICE.INVOICE_NUM, INVOICE.INVOICE_DATE
 FROM CUSTOMER
 INNER JOIN INVOICE ON CUSTOMER.CUSTOMER_ID = INVOICE.CUSTOMER_ID
 INNER JOIN EMPLOYEE ON INVOICE.EMPLOYEE_ID = EMPLOYEE.EMPLOYEE_ID
 INNER JOIN DELIVERY ON DELIVERY.DELIVERY_ID = INVOICE.DELIVERY_ID
 INNER JOIN DONATION ON DONATION.DONATION_ID = INVOICE.DONATION_ID
 WHERE INVOICE.INVOICE_DATE = '18 MAY 2022';
 
/*Question 4*/ 
CREATE VIEW EMPLOYEE_INVOICE_VIEW AS
SELECT EMPLOYEE.EMPLOYEE_ID, EMPLOYEE.FIRST_NAME, EMPLOYEE.SURNAME, INVOICE.INVOICE_DATE
FROM EMPLOYEE
INNER JOIN INVOICE ON INVOICE.EMPLOYEE_ID = EMPLOYEE.EMPLOYEE_ID
INNER JOIN DONATION ON DONATION.CUSTOMER_ID = EMPLOYEE.CUSTOMER_ID
WHERE DONATION.DONATION_DATE = '18 MAY 2022';
/*Question 4.2 
Simplified querying: The View makes it easier to access data from numerous tables. 
Rather of constructing complex joins and filters, the user may just select the data they require from the View, which includes all of the necessary joins and filters.
Data security is improved since the View can be used to restrict access to sensitive data
*/ 

/*Question 5*/ 
SET SERVEROUTPUT ON

DECLARE
CUST_NAME CUSTOMER_TABLE.FIRST_NAME%TYPE;
CUST_SURNAME CUSTOMER_TABLE.SURNAME%TYPE;
DON_DONATION DONATION_TABLE.DONATION%TYPE;

DON_PRICE  DONATION_TABLE.PRICE%TYPE;
REC_REASON RETURNS_TABLE.REASON%TYPE;
CURSOR INFO IS 
SELECT CUSTOMER_TABLE.FIRST_NAME,CUSTOMER_TABLE.SURNAME, DONATION_TABLE.DONATION, DONATION_TABLE.PRICE, RETURNS_TABLE.REASON 
FROM CUSTOMER_TABLE
INNER JOIN RETURNS_TABLE ON RETURNS_TABLE.CUSTOMER_ID  = CUSTOMER_TABLE.CUSTOMER_ID
LEFT JOIN DONATION_TABLE ON DONATION_TABLE.DONATION_ID  = RETURNS_TABLE.DONATION_ID;

BEGIN 
FOR RES IN INFO
LOOP

CUST_NAME := RES.FIRST_NAME;
CUST_SURNAME := RES.SURNAME;
DON_DONATION := RES.DONATION;
DON_PRICE := RES.PRICE;
REC_REASON := RES.REASON;

DBMS_OUTPUT.PUT_LINE('-------------------------------------------------');
DBMS_OUTPUT.PUT_LINE('CUSTOMER:" ' || CUST_NAME || ', ' || CUST_SURNAME);
DBMS_OUTPUT.PUT_LINE('DONATION PURCHASED: ' || DON_DONATION);
DBMS_OUTPUT.PUT_LINE('PRICE: ' || DON_PRICE);
DBMS_OUTPUT.PUT_LINE('RETURN REASON:  ' || REC_REASON);

END LOOP;
DBMS_OUTPUT.PUT_LINE('-------------------------------------------------');
end;

/*Question 6*/ 
SET SERVEROUTPUT ON;

DECLARE
DON_NAME DONATOR_TABLE.FIRST_NAME%TYPE;
DON_SURNAME DONATOR_TABLE.SURNAME%TYPE;
DONATION DONATION_TABLE.DONATION%TYPE;
EMP_NAME EMPLOYEE_TABLE.FIRST_NAME%TYPE;
EMP_SURNAME EMPLOYEE_TABLE.SURNAME%TYPE;
DEL_DATE DELIVERY_TABLE.DELIVERY_DATE%TYPE;
DIS_DATE DELIVERY_TABLE.DISPATCH_DATE%TYPE;
DATE_DIFF INT;

CURSOR DONAT IS 
SELECT substr(A.FIRST_NAME,1,1) as DON, A.SURNAME as SUR, B.DONATION, substr(D.FIRST_NAME,1,1) as FIRST_NAME, D.SURNAME, E.DELIVERY_DATE, E.DISPATCH_DATE, E.DELIVERY_DATE - E.DISPATCH_DATE as DATEDIFF 
FROM DONATOR_TABLE A
JOIN DONATION_TABLE B ON B.DONATOR_ID = A.DONATOR_ID 
JOIN INVOICE_TABLE C ON C.DONATION_ID = B.DONATION_ID
JOIN EMPLOYEE_TABLE D ON D.EMPLOYEE_ID = C.EMPLOYEE_ID
JOIN DELIVERY_TABLE E ON E.DELIVERY_ID = C.DELIVERY_ID
JOIN CUSTOMER_TABLE F ON F.CUSTOMER_ID = C.CUSTOMER_ID
WHERE C.CUSTOMER_ID = 11013;


BEGIN 
FOR RES IN DONAT
LOOP

DON_NAME := RES.DON;
DON_SURNAME := RES.SUR;
DONATION := RES.DONATION;
EMP_NAME := RES.FIRST_NAME;
EMP_SURNAME := RES.SURNAME;
DEL_DATE := RES.DELIVERY_DATE;
DIS_DATE := RES.DISPATCH_DATE;
DATE_DIFF := RES.DATEDIFF;

DBMS_OUTPUT.PUT_LINE('----------------------------------------------------');
DBMS_OUTPUT.PUT_LINE('CUSTOMER: '|| CHR(9) || CHR(9) || CHR(9) || DON_NAME || '.' || DON_SURNAME);
DBMS_OUTPUT.PUT_LINE('EMPOLYEE: '|| CHR(9) || CHR(9) || CHR(9) || EMP_NAME || '.' || EMP_SURNAME);
DBMS_OUTPUT.PUT_LINE('DONATION: '|| CHR(9) || CHR(9) || CHR(9) || DONATION);
DBMS_OUTPUT.PUT_LINE('DISPATCH DATE: '|| CHR(9) || CHR(9) || DIS_DATE);
DBMS_OUTPUT.PUT_LINE('DELIVERY DATE: '|| CHR(9) || CHR(9) || DEL_DATE);
DBMS_OUTPUT.PUT_LINE('DAYS TO DELIVERY: '|| CHR(9) || DATE_DIFF);

END LOOP;
DBMS_OUTPUT.PUT_LINE('-------------------------------------------------');
end;
/*Question 6.2
VARCHAR2: This data type is used to store character data of variable length up to a maximum size of 4000 bytes. 
DATE: This data type is used to store date and time data, including year, month, day, hour, minute, and second information.
*/ 

/*Question 7*/ 
 DECLARE
C_CUSTOMERID CUSTOMER.CUSTOMER_ID%TYPE;
D_DONATIONID DONATION.DONATION_ID%TYPE;
DO_DONATOR DONATOR.DONATOR_ID%TYPE;
DE_DELIVERY DELIVERY.DELIVERY_ID%TYPE;
RE_RETURNID RETURNS.RETURN_ID%TYPE;
RE_REASON RETURNS.REASON%TYPE;
DO_PRICE DONATION.PRICE%TYPE;
CURSOR INFO IS 
SELECT DISTINCT CUSTOMER.CUSTOMER_ID ,DONATION.DONATION_ID,DONATOR.DONATOR_ID,
DELIVERY.DELIVERY_ID,RETURNS.RETURN_ID,RETURNS.REASON,DONATION.PRICE
FROM CUSTOMER,DONATION,DONATOR,DELIVERY,RETURNS
WHERE CUSTOMER.CUSTOMER_ID=RETURNS.CUSTOMER_ID AND
DONATION.DONATION_ID=RETURNS.DONATION_ID AND 
DELIVERY.DELIVERY_ID = 512;
BEGIN 
   FOR REC IN INFO
   LOOP
    C_CUSTOMERID :=REC.CUSTOMER_ID;
D_DONATIONID :=REC.DONATION_ID;
DO_DONATOR :=REC.DONATOR_ID;
DE_DELIVERY :=REC.DELIVERY_ID;
RE_RETURNID :=REC.RETURN_ID;
RE_REASON :=REC.REASON;
DO_PRICE :=REC.PRICE;
       dbms_output.put_line('CUSTOMER ID :'||C_CUSTOMERID );
       dbms_output.put_line('DONATION ID :'||D_DONATIONID );
       dbms_output.put_line('DONATOR ID:'|| DO_DONATOR);
       dbms_output.put_line('DELIVERY ID :'||  DE_DELIVERY);
       dbms_output.put_line('RETURN ID :'|| RE_RETURNID);
        dbms_output.put_line('RETURN REASON :'|| RE_REASON);
         dbms_output.put_line('DELIVERY PRICE :'|| DO_PRICE*0.2);
       dbms_output.put_line('---------------------------------------');
      END LOOP;

END;
/*Question 7.2
Semicolon (;): In PL/SQL, a semicolon is used to mark the end of a statement. 
It is used to separate multiple statements in a single line of code
Comma (,): In PL/SQL, a comma is used as a separator in various parts of a query.
*/ 

/*Question 8*/ 
 SET SERVEROUTPUT ON;
 BEGIN 
 DELETE FROM EMPLOYEE
 WHERE EMPLOYEE_ID = 'emp104';
 END;
ROLLBACK;
 /*Q8.2 When a user deletes an inaccurate record, the user can undo it by issuing the ROLLBACK statement to manually remove work done by a dispersed transaction in question or work handed out by the present transaction..*/

 /*Question 9*/ 
/*CREATING SEQUENCE TO GENERATE IDS*/
 SET SERVEROUTPUT ON;
CREATE SEQUENCE SEQ_FUNDER MINVALUE 1 START WITH 1 INCREMENT BY 1 CACHE 20; 
CREATE TABLE FUNDING_TABLE( FUNDING_ID INT PRIMARY KEY NOT NULL, FUNDER VARCHAR2(20), FUNDING_AMOUNT INT ); 

INSERT INTO FUNDING_TABLE VALUES(SEQ_FUNDER.NEXTVAL,'jOSEPH',500); --Viewing the created table--
SELECT * FROM FUNDING_TABLE; 
DROP TABLE FUNDING_TABLE;

CREATE TABLE FUNDING(
FUNDING_ID NUMBER(10) PRIMARY KEY,
FUNDER VARCHAR(20) NOT NULL,
FUNDING_AMOUNT DECIMAL(10,0) NOT NULL
);

CREATE SEQUENCE FUNDING_SEQ;

INSERT INTO FUNDING(FUNDING_ID,FUNDER, FUNDING_AMOUNT) VALUES (1, 'Jack Smith', 1700);
INSERT INTO FUNDING(FUNDING_ID,FUNDER, FUNDING_AMOUNT) VALUES (2, 'Adanya Andrews', 1701);
INSERT INTO FUNDING(FUNDING_ID,FUNDER, FUNDING_AMOUNT) VALUES (3, 'Kelly Ross', 1702);
INSERT INTO FUNDING(FUNDING_ID,FUNDER, FUNDING_AMOUNT) VALUES (4, 'Jeff Watson', 1703);
INSERT INTO FUNDING(FUNDING_ID,FUNDER, FUNDING_AMOUNT) VALUES (5, 'Xolani Samson', 1704);
SELECT * FROM FUNDING;    
       
     

DROP TABLE FUNDING;
CREATE TABLE FUNDING (
  FUNDING_ID NUMBER GENERATED ALWAYS AS IDENTITY,
  FUNDER VARCHAR2(50),
  FUNDING_AMOUNT NUMBER,
  CONSTRAINT FUNDING_PK PRIMARY KEY (FUNDING_ID)
);

INSERT INTO FUNDING (FUNDER, FUNDING_AMOUNT) VALUES ('Jack Smith', 1700);
INSERT INTO FUNDING(FUNDER, FUNDING_AMOUNT) VALUES ( 'Adanya Andrews', 1701);
INSERT INTO FUNDING(FUNDER, FUNDING_AMOUNT) VALUES ( 'Kelly Ross', 1702);
INSERT INTO FUNDING(FUNDER, FUNDING_AMOUNT) VALUES ( 'Jeff Watson', 1703);
INSERT INTO FUNDING(FUNDER, FUNDING_AMOUNT) VALUES ( 'Xolani Samson', 1704);
SELECT*FROM FUNDING;



      
       